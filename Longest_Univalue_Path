//https://leetcode.com/problems/longest-univalue-path/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans=0;
    int dfs(TreeNode* root)
    { 
        if(root==NULL)
            return 0;
       
        
        int xl=dfs(root->left);
        int xr=dfs(root->right);
        
        
        int la=0;
        int ra=0;
        if(root->left)
        {
            if(root->val==(root->left)->val)
            {
                la=xl;
            la++;
            }
        }
        if(root->right)
        {
             if(root->val==(root->right)->val)
             {
                 ra=xr;
                 ra++;
             }
           
        }
    ans=max(ans,la+ra);
        return (int)max(la,ra);
       
   
        
        
        
        
    }
        
    int longestUnivaluePath(TreeNode* root) {
        dfs(root);
        return ans;
    }
};
