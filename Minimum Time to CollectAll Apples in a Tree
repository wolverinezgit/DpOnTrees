//https://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree/

class Solution {
public:
    vector<int> dp;
    void dfs(int cur,int par,vector<vector<int>> &G, vector<bool>& hasApple)
    {
        for(auto x:G[cur])
        {
            if(x!=par)
            {
                dfs(x,cur,G,hasApple);
                if(dp[x]||hasApple[x])
                {
                    dp[cur]+=(dp[x]+2);
                }
            }
            
        }
        
    }
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple)
    {
        
      vector<vector<int>> G(n+1);
        dp=vector<int> (n+1,0);
        int i;
        for(i=0;i<edges.size();i++)
        {
            G[edges[i][0]].push_back(edges[i][1]);
               G[edges[i][1]].push_back(edges[i][0]);
              
        }
                 dfs(0,-1,G,hasApple);
                 return dp[0];
                 
    }
};
